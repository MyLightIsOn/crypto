"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/common/http");
require("rxjs/add/operator/map");
require("rxjs/add/operator/share");
var CryptoService = /** @class */ (function () {
    function CryptoService(http) {
        this.http = http;
        this.coinArray = [];
        this.lookup = {};
        this.total = 0;
        this.cryptoList = [
            { symbol: 'TRX', amount: 4809.611 },
            { symbol: 'IOST', amount: 3626.37 },
            { symbol: 'XVG', amount: 2064.611 },
            { symbol: 'POE', amount: 1798.20 },
            { symbol: 'CND', amount: 999 },
            { symbol: 'TNB', amount: 999 },
            { symbol: 'ADA', amount: 299.7 },
            { symbol: 'XRP', amount: 161.838 },
            { symbol: 'IOTA', amount: 46.953 },
            { symbol: 'LTC', amount: 1.59840 },
            { symbol: 'BCX', amount: 999 },
            { symbol: 'BTC', amount: 0.00017156 }
        ];
    }
    CryptoService.prototype.getCrypto = function () {
        return this.http.get('https://api.binance.com/api/v3/ticker/price');
    };
    CryptoService.prototype.matchCoins = function (crypto) {
        for (var coin in this.cryptoList) {
            if (this.cryptoList[coin]['symbol'].slice(0, 3) === 'BTC') {
                this.lookup[this.cryptoList[coin]['symbol'] + 'USDT'] = this.cryptoList[coin]['symbol'];
            }
            else {
                this.lookup[this.cryptoList[coin]['symbol'] + 'BTC'] = this.cryptoList[coin]['symbol'];
            }
        }
        for (var i in crypto) {
            if (typeof this.lookup[crypto[i]['symbol']] !== 'undefined') {
                this.coinArray.push(crypto[i]);
            }
        }
        this.caclulateValue();
        return this.coinArray;
    };
    CryptoService.prototype.caclulateValue = function () {
        for (var i in this.coinArray) {
            for (var coin in this.cryptoList) {
                if (this.coinArray[i]['symbol'] === this.cryptoList[coin]['symbol'] + 'BTC') {
                    this.coinArray[i]['btc_value'] = this.coinArray[i]['price'] * this.cryptoList[coin]['amount'];
                    this.coinArray[i]['usd_value'] = (this.coinArray[i]['btc_value'] * this.bitcoin['price']).toFixed(2);
                }
                if (this.coinArray[i]['symbol'] === this.cryptoList[coin]['symbol'] + 'USDT') {
                    this.coinArray[i]['btc_value'] = this.cryptoList[coin]['amount'];
                    this.coinArray[i]['usd_value'] = (this.coinArray[i]['btc_value'] * this.bitcoin['price']).toFixed(2);
                }
            }
            this.total = this.total + parseFloat(this.coinArray[i]['usd_value']);
        }
        this.total = Math.round(this.total * 1e2) / 1e2;
        console.log('total: ' + this.total);
        console.log(this.coinArray);
    };
    CryptoService.prototype.getBTCValue = function (crypto) {
        for (var _i = 0, crypto_1 = crypto; _i < crypto_1.length; _i++) {
            var coin = crypto_1[_i];
            if (coin['symbol'] === 'BTCUSDT') {
                this.bitcoin = coin;
            }
        }
        return this.matchCoins(crypto);
    };
    CryptoService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [http_1.HttpClient])
    ], CryptoService);
    return CryptoService;
}());
exports.CryptoService = CryptoService;
//# sourceMappingURL=data:application/json;base64,